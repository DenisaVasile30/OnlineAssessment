{% extends 'base.html.twig' %}

{% block body %}
{#    to do: timer for startAt and EndAt, if the time has passed stop assessment#}
    <div>
        <div>
            {{ requiredAssessment.description }}
        </div>
        <div>
            {#                     TO DO: add programming language in assessment#}
            <label>Programming language to use: C++ </label>
        </div>
        <div>
            {% for requiredSubject in requiredSubjects %}
                <hr>
            <div>
                <div>
                    <span>Requirement: </span>
                </div>
                <div>
                    {{ requiredSubject.subject }}
                </div>
                <div>
                    {% if requiredSubject.subjectRequirements is not null %}
                        <label>Additional information:</label>
                        <span>{{ requiredSubject.subjectRequirements }}</span>
                    {% else %}
                        <label>No specific requirements</label>
                    {% endif %}
                </div>
                <div>
                    {% if requiredSubject.subjectContent is not null %}
                        <label>Resolve the following:</label>
                        <div>
                            <span>{{ requiredSubject.subjectContent }}</span>
                        </div>
                    {% endif %}
                    {% if requiredSubject.subjectContent is defined %}
{#                        add span with the content#}
                        <div>
                            <a href="{{ path('app_download_subject_content', { subject: (requiredSubject.id) }) }}">Download subject content</a>
                        </div>
                        <button id="toggle-{{ requiredSubject.id }}" onclick="toggleContent('{{ requiredSubject.id }}')">View Content File</button>
                        <div id="{{ requiredSubject.id }}" aria-readonly="true" >
                            {{ filesContent[requiredSubject.id]|raw }}
                        </div>
                    {% endif %}
                </div>
                <hr>
            </div>
            {% endfor %}
                <div>
                    <label>Write below the solution</label>
                    {{ form_start(submittedCode) }}
                    <div>
                        {{ form_widget(submittedCode.run, { 'label': 'Run' }) }}
                    </div>
                    <div>
                        {{ form_widget(submittedCode.submit, { 'label': 'Submit' }) }}
                    </div>

                </div>
                <div id="parent-div">
                    <div id="dropdown-autocomplete" style="color: black">
                    </div>
                    <div>
                        {{ form_widget(submittedCode.codeArea, {'attr': {'class': 'block w-full shadow-sm border-gray-300 dark:border-transparent dark:text-gray-800 rounded-md border p-2 mt-1 mb-2'}})}}
                        {{ form_errors(submittedCode.codeArea) }}
                    </div>
                </div>
                {{ form_end(submittedCode) }}
                <div>
                    <label>Resulted output:</label>
                    <div>
                        <textarea style="width: 100%; color: black; height: 150px">
                            {{ responseMessage }}
                        </textarea>
                    </div>
                </div>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
        </div>



    </div>
{% endblock  %}

{% block stylesheets %}
    <style>
        #file-content {
            display: none;
        }
        #file-content.show {
            display: block;
        }
    </style>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function toggleContent(subjectId) {
            var contentDiv = document.getElementById(subjectId);
            var toggleButton = document.getElementById('toggle-' + subjectId);

            if (contentDiv.style.display === 'none') {
                contentDiv.style.display = 'block';
                toggleButton.textContent = 'Hide Content';
            } else {
                contentDiv.style.display = 'none';
                toggleButton.textContent = 'View Content';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            var textareaCode = document.getElementById("submitted_code_form_codeArea");

            textareaCode.addEventListener("paste", function(e) {
                var clipboardData = e.clipboardData || window.clipboardData;
                var pastedData = clipboardData.getData("text/plain");
                var currentValue = textareaCode.value;

                // Check if the pasted data came from within the textarea
                if (currentValue.includes(pastedData)) {
                    // Allow the paste to proceed
                    console.log('Allow paste');
                } else {
                    // Prevent the paste
                    console.log('Deny paste');
                    e.preventDefault();
                }
            });

            textareaCode.addEventListener("keydown", handleKeyDown);

            function handleKeyDown(event) {
                if (event.ctrlKey && event.code === "Space") {
                    let reservedWordsList = JSON.parse('{{ reservedWordsList|json_encode|raw }}');
                    // for (let i = 0; i < reservedWordsList.length; i++) {
                    //     console.log(reservedWordsList[i]);
                    // }

                    const partialWord = getPartialWord();
                    // console.log(partialWord);
                    const startIndex = getStartIndex();
                    let filteredWords = reservedWordsList.filter((element) => element.includes(partialWord));
                    // console.log(filteredWords);
                    if (filteredWords !== undefined) {
                        if (document.getElementById("select") !== null) {
                            const doc = document.getElementById("select");
                            doc.remove();
                        }
                        const dropdown = document.createElement("select");
                        dropdown.id = "select";

                        const optionElement = document.createElement("option");
                        optionElement.value = partialWord + "-" + startIndex + "-" + "";
                        optionElement.text = "";
                        dropdown.appendChild(optionElement);
                        filteredWords.forEach((option) => {
                            const optionElement = document.createElement("option");
                            optionElement.value = partialWord + "-" + startIndex + "-" + option;
                            optionElement.text = option;
                            dropdown.appendChild(optionElement);
                        });

                        const dropdownAutocomplete = document.getElementById("dropdown-autocomplete");
                        dropdownAutocomplete.appendChild(dropdown);

                        const parentDiv = document.getElementById("parent-div");
                        parentDiv.insertBefore(dropdownAutocomplete, parentDiv.firstChild);

                        const selectDropDown = document.getElementById("select");
                        selectDropDown.onchange = function () {
                            const selectedKey = document.getElementById("select").value;
                            const selectedValuesArray = selectedKey.split("-");
                            console.log(selectedValuesArray.length);
                            console.log("actual value::" + textareaCode.value);
                            let lengthToReplace = partialWord.length;

                            const firstPart = (textareaCode.value).substr(0, startIndex);
                            console.log("firstPart::" + firstPart);
                            const secondPart = (textareaCode.value).substr(startIndex);
                            console.log("secondPart::" + secondPart);

                            if (selectedValuesArray[2].length > secondPart.length) {
                                lengthToReplace = selectedValuesArray[2].length;
                            }
                            const stringToReplace = (textareaCode.value).substr(startIndex, lengthToReplace);
                            console.log(stringToReplace);
                            const updatedSecondPart = secondPart.replace(stringToReplace, selectedValuesArray[2]);
                            const updatedTextArea = firstPart + " " + updatedSecondPart;
                            textareaCode.value = updatedTextArea;
                        };
                    }
                }
            }

            function getPartialWord() {
                const text = textareaCode.value;
                const startIndex = text.lastIndexOf(" ") + 1;
                const endIndex = text.length;

                return text.substring(startIndex, endIndex);
            }

            function getStartIndex() {
                const text = textareaCode.value;

                return text.lastIndexOf(" ") + 1;
            }
        });
    </script>

{% endblock %}