{% extends 'base.html.twig' %}

{% block body %}
{#    to do: timer for startAt and EndAt, if the time has passed stop assessment#}
    <br>
    <div class="box">
        <div class="label-elem">
            {{ requiredAssessment.description }}
        </div>
        <br>
        {#                     TO DO: add programming language in assessment#}
        <label class="label-elem">Programming language to use: C </label><br>
        <div>
            <div class="box">
                {% for requiredSubject in requiredSubjects %}
                    <label class="label-elem">
                        {{ 'Discipline:    '~requiredSubject.subject }}
                    </label><br>
                    {% if requiredSubject.subjectRequirements is not null %}
                        <label class="label-elem">Additional information:</label>
                        <span>{{ requiredSubject.subjectRequirements }}</span>
                    {% else %}
                        <label>No specific requirements</label><br><br>
                    {% endif %}
                    {% if requiredSubject.subjectContent is not null %}
                        <label class="label-elem">Resolve the following:</label><br>
                        <div>
                            <span>{{ requiredSubject.subjectContent }}</span>
                        </div>
                    {% endif %}
                    {% if requiredSubject.subjectContent is defined %}
                        <button class="save-button" id="toggle-{{ requiredSubject.id }}"
                                onclick="toggleContent('{{ requiredSubject.id }}')">
                            Hide Content File
                        </button>
                        <div class="label-elem" id="{{ requiredSubject.id }}" aria-readonly="true">
                            {{ filesContent[requiredSubject.id]|raw }}
                        </div>
                        <button class="save-button">
                            <a href="{{ path('app_download_subject_content', { subject: (requiredSubject.id) }) }}">Download subject content</a>
                        </button>
                    {% endif %}
                {% endfor %}
            </div>
            <br>
            <div class="box">
                <label class="label-elem">Write below the solution:</label><br>
                {{ form_start(submittedCode) }}
                {{ form_widget(submittedCode.run, { 'label': 'Run', 'attr': {'class': 'save-button'} }) }}
                {{ form_widget(submittedCode.submit, { 'label': 'Submit', 'attr': {'class': 'save-button' }}) }}
                <div id="dropdown-autocomplete" style="color: black"></div>
                {{ form_widget(submittedCode.codeArea, {'attr': {'class': 'block w-full shadow-sm border-gray-300 dark:border-transparent dark:text-gray-800 rounded-md border p-2 mt-1 mb-2'}})}}
                {{ form_errors(submittedCode.codeArea) }}
                {{ form_end(submittedCode) }}
                <label class="label-elem">Resulted output:</label><br><br>
                <textarea style="width: 100%; color: black; height: 150px">
                    {{ responseMessage }}
                </textarea>
            </div>
        </div>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
            <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
{#            <link rel="stylesheet" href="/resources/demos/style.css">#}
            <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
            <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
        </div>
    </div>
{% endblock  %}

{% block stylesheets %}
    <style>
        #file-content {
            display: none;
        }
        #file-content.show {
            display: block;
        }
        #result {
            border: 1px dotted #ccc;
            padding: 3px;
        }
        #result ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        #result ul li {
            padding: 5px 0;
        }
        #result ul li:hover {
            background: #eee;
        }
        #myTextarea {
            position: relative;
            height: 100px;
            width: 200px;
            padding: 10px;
            border: 1px solid black;
        }

        #myInput {
            position: absolute;
            top: 10px;
            left: 10px;
            display: none;
        }
        #dropdown-autocomplete{
            position: absolute;
            background-color: transparent;
            border: none;
            outline: none;
        }
    </style>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function toggleContent(subjectId) {
            var contentDiv = document.getElementById(subjectId);
            var toggleButton = document.getElementById('toggle-' + subjectId);

            if (contentDiv.style.display === 'none') {
                contentDiv.style.display = 'block';
                toggleButton.textContent = 'Hide Content';
            } else {
                contentDiv.style.display = 'none';
                toggleButton.textContent = 'View Content';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            var textareaCode = document.getElementById("submitted_code_form_codeArea");

            textareaCode.addEventListener("paste", function (e) {
                // var clipboardData = e.clipboardData || window.clipboardData;
                // var pastedData = clipboardData.getData("text/plain");
                // console.log(clipboardData);
                // console.log('pasted data');
                // console.log(pastedData);
                // var currentValue = textareaCode.value;
                //
                // // Check if the pasted data came from within the textarea
                // if (currentValue.includes(pastedData)) {
                //     // Allow the paste to proceed
                //     console.log('Allow paste');
                // } else {
                //     // Prevent the paste
                //     console.log('Deny paste');
                //     e.preventDefault();
                // }
            });

            textareaCode.addEventListener("keydown", handleKeyDown);

            function handleKeyDown(event) {
                if (event.ctrlKey && event.code === "Space") {
                    const cursorPosition = event.target.getBoundingClientRect();
                    const positionTop = event.target.getBoundingClientRect().top;
                    const positionLeft = event.target.getBoundingClientRect().left;


                    // console.log( cursorPosition );
                    let reservedWordsList = JSON.parse('{{ reservedWordsList|json_encode|raw }}');
                    // for (let i = 0; i < reservedWordsList.length; i++) {
                    //     console.log(reservedWordsList[i]);
                    // }

                    const partialWord = getPartialWord();
                    // console.log(partialWord);
                    const startIndex = getStartIndex();
                    let filteredWords = reservedWordsList.filter((element) => element.includes(partialWord));
                    // console.log(filteredWords);
                    if (filteredWords !== undefined) {
                        if (document.getElementById("select") !== null) {
                            const doc = document.getElementById("select");
                            doc.remove();
                        }
                        const dropdown = document.createElement("select");
                        dropdown.id = "select";

                        const optionElement = document.createElement("option");
                        optionElement.value = partialWord + "-" + startIndex + "-" + "";
                        optionElement.text = "";
                        dropdown.appendChild(optionElement);
                        filteredWords.forEach((option) => {
                            const optionElement = document.createElement("option");
                            optionElement.value = partialWord + "-" + startIndex + "-" + option;
                            optionElement.text = option;
                            dropdown.appendChild(optionElement);
                        });

                        const dropdownAutocomplete = document.getElementById("dropdown-autocomplete");
                        dropdownAutocomplete.appendChild(dropdown);
                        console.log(textareaCode.selectionStart);
                        console.log(textareaCode.selectionEnd);
                        const parentDiv = document.getElementById("parent-div");
                        dropdown.style.position = "absolute";
                        dropdown.style.top = positionTop + "px";
                        dropdown.style.left = positionLeft + "px";
                        parentDiv.insertBefore(dropdownAutocomplete, parentDiv.firstChild);
                        // console.log(pageYOffset);
                        const selectDropDown = document.getElementById("select");
                        selectDropDown.onchange = function () {
                            const selectedKey = document.getElementById("select").value;
                            const selectedValuesArray = selectedKey.split("-");
                            console.log(selectedValuesArray.length);
                            console.log("actual value::" + textareaCode.value);
                            let lengthToReplace = partialWord.length;

                            const firstPart = (textareaCode.value).substr(0, startIndex);
                            console.log("firstPart::" + firstPart);
                            const secondPart = (textareaCode.value).substr(startIndex);
                            console.log("secondPart::" + secondPart);

                            if (selectedValuesArray[2].length > secondPart.length) {
                                lengthToReplace = selectedValuesArray[2].length;
                            }
                            const stringToReplace = (textareaCode.value).substr(startIndex, lengthToReplace);
                            console.log(stringToReplace);
                            const updatedSecondPart = secondPart.replace(stringToReplace, selectedValuesArray[2]);
                            const updatedTextArea = firstPart + " " + updatedSecondPart;
                            textareaCode.value = updatedTextArea;
                        };
                    }
                }
            }

            function getPartialWord() {
                const text = textareaCode.value;
                const startIndex = text.lastIndexOf(" ") + 1;
                const endIndex = text.length;

                return text.substring(startIndex, endIndex);
            }

            function getStartIndex() {
                const text = textareaCode.value;

                return text.lastIndexOf(" ") + 1;
            }
        });



    </script>

{% endblock %}

